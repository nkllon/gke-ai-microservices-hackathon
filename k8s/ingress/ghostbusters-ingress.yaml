apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ghostbusters-ingress
  namespace: ghostbusters-ingress
  labels:
    app: ghostbusters-ingress
    component: ingress
  annotations:
    kubernetes.io/ingress.class: "gce"
    kubernetes.io/ingress.global-static-ip-name: "ghostbusters-hackathon-ip"
    cloud.google.com/load-balancer-type: "External"
    cloud.google.com/backend-config: '{"default": "ghostbusters-backend-config"}'
    cloud.google.com/ssl-certificates: "ghostbusters-ssl-cert"
    cloud.google.com/managed-certificates: "ghostbusters-managed-cert"
    cloud.google.com/neg: '{"ingress": true}'
    # Cost control annotations
    cost-center: "hackathon"
    environment: "development"
    auto-shutdown: "true"
spec:
  rules:
  - host: "ghostbusters-hackathon.example.com"  # Replace with actual domain
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: ghostbusters-frontend
            port:
              number: 80
      - path: /api
        pathType: Prefix
        backend:
          service:
            name: ghostbusters-orchestrator
            port:
              number: 8080
      - path: /security
        pathType: Prefix
        backend:
          service:
            name: ghostbusters-security-agent
            port:
              number: 8080
      - path: /quality
        pathType: Prefix
        backend:
          service:
            name: ghostbusters-quality-agent
            port:
              number: 8080
      - path: /test
        pathType: Prefix
        backend:
          service:
            name: ghostbusters-test-agent
            port:
              number: 8080
      - path: /performance
        pathType: Prefix
        backend:
          service:
            name: ghostbusters-performance-agent
            port:
              number: 8080
      - path: /metrics
        pathType: Prefix
        backend:
          service:
            name: ghostbusters-orchestrator
            port:
              number: 9090
  tls:
  - hosts:
    - "ghostbusters-hackathon.example.com"  # Replace with actual domain
    secretName: ghostbusters-tls-secret
---
# Backend configuration for cost optimization
apiVersion: cloud.google.com/v1
kind: BackendConfig
metadata:
  name: ghostbusters-backend-config
  namespace: ghostbusters-ingress
spec:
  healthCheck:
    checkIntervalSec: 30
    timeoutSec: 5
    healthyThreshold: 1
    unhealthyThreshold: 2
    type: HTTP
    requestPath: /health
    port: 8080
  connectionDraining:
    drainingTimeoutSec: 60
  # Cost optimization settings
  timeoutSec: 300  # 5 minutes max
  maxRatePerInstance: 100  # Limit requests per instance
  maxConnectionsPerInstance: 50  # Limit connections per instance
---
# Frontend service for the web interface
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ghostbusters-frontend
  namespace: ghostbusters-ingress
  labels:
    app: ghostbusters-frontend
    component: frontend
    version: v1.0.0
spec:
  replicas: 1  # Start with 1 replica for cost control
  selector:
    matchLabels:
      app: ghostbusters-frontend
  template:
    metadata:
      labels:
        app: ghostbusters-frontend
        component: frontend
        version: v1.0.0
    spec:
      containers:
      - name: frontend
        image: gcr.io/aardvark-linkedin-grepper/ghostbusters-frontend:v1.0.0
        ports:
        - containerPort: 80
          name: http
        env:
        - name: ENVIRONMENT
          value: "development"
        - name: LOG_LEVEL
          value: "INFO"
        - name: ORCHESTRATOR_URL
          value: "http://ghostbusters-orchestrator.ghostbusters-ai.svc.cluster.local:8080"
        resources:
          requests:
            memory: "64Mi"     # Minimal resource requests
            cpu: "50m"
          limits:
            memory: "128Mi"    # Reasonable resource limits
            cpu: "100m"
        livenessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /ready
            port: 80
          initialDelaySeconds: 5
          periodSeconds: 5
---
apiVersion: v1
kind: Service
metadata:
  name: ghostbusters-frontend
  namespace: ghostbusters-ingress
  labels:
    app: ghostbusters-frontend
    component: frontend
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: 80
    name: http
  selector:
    app: ghostbusters-frontend
---
# Auto-scaling for frontend (conservative for cost control)
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: ghostbusters-frontend-hpa
  namespace: ghostbusters-ingress
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: ghostbusters-frontend
  minReplicas: 1      # Conservative scaling for cost control
  maxReplicas: 3      # Max 3 replicas during development
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 80  # Scale up at 80% CPU
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300  # 5 minutes to prevent rapid scaling
